@using HelpDesk_Benedict.Models
@using HelpDesk_Benedict.Components.Helpers;
@using HelpDesk_Benedict.Models.DTO
@using HelpDesk_Benedict.Services
@using HelpDesk_Benedict.Components.TicketCards;
@using Microsoft.AspNetCore.SignalR.Client
@inject UserDataService userService;
@inject TicketCommentService TicketCommentService;
@inject NavigationManager NavigationManager
@implements IAsyncDisposable;

<Card Class="mb-3 w-100">
    <CardBody>
        <!-- Kopfzeile -->
        <div class="d-flex justify-content-between align-items-center mb-2">
            <div class="fw-bold">
                #@Ticket.Id - @Ticket.Title
            </div>
            <span class="badge rounded-5 bg-primary fw-lighter">@Ticket.Status</span>
        </div>

        <div class="d-flex text-center border-top pt-2">
            <div class="flex-fill border-end">
                <small class="fw-lighter">Ticket Type</small><br />
                @Ticket.Category
            </div>
            <div class="flex-fill border-end align-content-center">
                <small class="fw-lighter">Ticket Priority</small><br /> 
                <div class="opacity-box" style="background-color: @priorityColor">                    
                </div>               
                <span style="position:relative; z-index:1;">
                    <i class="bi bi-dot" style="color: @priorityColor"></i>
                    @Ticket.Priority
                </span>
            </div>
            <div class="flex-fill">
                <small class="fw-lighter">Ticket Room</small><br />
                <i class="bi bi-door-open"></i>
                @Ticket.Room.Name
            </div>
        </div>
    </CardBody>
</Card>
<div class="w-100">
    <div class="d-flex justify-content-center align-items-center mb-2">
        <div class="fw-bold">
            Ticket Comments
        </div>
        <span class="badge rounded-5 bg-secondary fw-lighter">2</span>
    </div>
    
    <div class="d-flex flex-column text-center border-top pt-2 overflow-auto"
         style="max-height: 240px">
        @if(Ticket.TicketComments?.Count == 0)
        {
            <div class="text-center text-muted w-100">
                No comments yet.
            </div>
        } 
        else if(Ticket.TicketComments?.Count > 0) {

        @foreach(var comment in Ticket.TicketComments!)
        {
            bool isOwnComment = comment.UserId == userId;

            <div class="d-flex my-2 @(isOwnComment ? "justify-content-end" : "justify-content-start")">
                <div class="chat-bubble p-3 shadow-sm
                    @(isOwnComment ? "own-message" : "other-message")">
                    <div class="small">
                        @comment.Message
                    </div>
                    <div class="text-end text-muted mt-1" style="font-size: 0.75rem;">
                        @comment.Timestamp.ToString("HH:mm")
                    </div>
                </div>
            </div>
        }
        }     
    </div>
    <div class="border-t p-4">
        <EditForm Model="@this" OnValidSubmit="AddCommentAsync">
            <div class="flex items-center space-x-2">
                <InputText @bind-Value="NewCommentText"
                           class="flex-1 border rounded px-3 py-2 focus:outline-none focus:ring focus:border-blue-300"
                           placeholder="Write Comment..."
                           @onkeydown="HandleKeyDown" />
                <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded">
                    Send
                </button>
            </div>
        </EditForm>
    </div>

</div>

@code {

    [Parameter] public Ticket Ticket { get; set; }

    private HubConnection? hubConnection;

    private string priorityColor;
    private string userId;
    private string NewCommentText { get; set; } = string.Empty; 

    protected override async Task OnInitializedAsync()

    {
        userId = await userService.GetUserIdAsync();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/ticketCommentHub"))
            .Build();

        hubConnection.On<TicketCommentDTO>("ReceiveComment", (comment) => {
        if (comment.UserId == userId) return;

            Ticket.TicketComments.Add(new TicketComment {
                TicketId = comment.TicketId,
                Message = comment.Message,
                UserId = comment.UserId,
                Timestamp = comment.Timestamp,
                Visibility = comment.Visibility
            });
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    protected override void OnParametersSet()
    {   
        TicketPriority ticketPriority = Ticket.Priority;
        priorityColor = ticketPriority switch {
            TicketPriority.Low => "green",
            TicketPriority.Medium => "orange",
            TicketPriority.High => "red",
            TicketPriority.Urgent => "darkred"
        };

    }


    private async Task AddCommentAsync() {
        if (string.IsNullOrWhiteSpace(NewCommentText)) return;

        var comment = new TicketComment {
            TicketId = Ticket.Id,
            Message = NewCommentText,
            UserId = userId,
            Visibility = CommentVisibility.Public,
            Timestamp = DateTime.Now
        };

        var commentDTO = TicketCommentDTO.ToDto(comment);
        
        await TicketCommentService.AddCommentAsync(comment);
        await hubConnection!.SendAsync("SendComment", commentDTO);

        NewCommentText = string.Empty;
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey) {
            await AddCommentAsync();
        }
    }

    public async ValueTask DisposeAsync() {
        if (hubConnection != null) {
            await hubConnection.DisposeAsync();
        }
    }

}


<style>

    .chat-bubble {
        max-width: 75%;
        border-radius: 1.5rem;
        position: relative;
        word-wrap: break-word;
    }

    .own-message {
        background-color: #dcf8c6;
        border-bottom-right-radius: 0.25rem;
    }

    .other-message {
        background-color: #f0f0f0;
        border-bottom-left-radius: 0.25rem;
    }
    .opacity-box {
        position: absolute;
        inset: 0;
        border-radius: 1rem;
        opacity: 0.2;
    }

    .opacity-box p {
        opacity: 1;
    }

</style>
